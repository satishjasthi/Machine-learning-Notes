Source: An Introduction to Reinforcement learning by Richard Sutton

Reinforcement learning is learning what to do-->how to map situations to
actions-->so as to maximize a numerical reward signal.

These two characteristics|trial-and-error search and delayed reward|are the two most important distinguishing features of reinforcement learning.

The major challenge in reinforcement learning is a trade off between exploration and exploitation.To obtain a lot of reward, a reinforcement learning agent must prefer actions that it has tried in the past and found to be effective in producing reward. But to discover such actions, it has to try actions that it has not selected before. The agent has to exploit what it already knows in order to obtain reward, but it also has to explore in order to make better action selections in
the future. The dilemma is that neither exploration nor exploitation can be pursued exclusively without failing at the task.

Elements of reinforcement learning: Beyond the agent and the environment, one can identify four main subelements of a reinforcement learning system: a policy, a reward function, a value function, and, optionally, a model of the environment.

Policy: defines the learning agent's way of behaving at a given time.It's like a function mapping from perceived states of the environement to actions to actions to be taken when in those states.In simple terms it's like stimulus-response rules or associatoin.The
policy is the core of a reinforcement learning agent in the sense that it alone is sufficient to determine behaviour.Policies can also be stochastic.

A reward function defines the goal in a reinforcement learning problem.
Roughly speaking, it maps each perceived state (or state{action pair) of the environment to a single number, a reward, indicating the intrinsic desirability of that state.A reinforcement learning agentâ€™s sole objective is to maximize the total reward it receives in the long run. The reward function defines what are the good and bad events for the agent. 

As such, the reward function must necessarily be unalterable by the agent. It may, however, serve as a basis for altering the policy. For example, if an action selected by the policy is followed by low reward, then the policy may be changed to select some other action in that situation in the future. In general, reward functions may be stochastic.


Whereas a reward function indicates what is good in an immediate sense,
a value function specifies what is good in the long run. Roughly speaking, the value of a state is the total amount of reward an agent can expect to accumulate over the future, starting from that state. Whereas rewards determine the immediate, intrinsic desirability of environmental states, values indicate the long-term desirability of states after taking into account the states that are likely to follow, and the rewards available in those states. For example, a state might always yield a low immediate reward but still have a high value because
it is regularly followed by other states that yield high rewards.


Rewards are in a sense primary, whereas values, as predictions of rewards, are secondary. Without rewards there could be no values, and the only purpose of estimating values is to achieve more reward. Nevertheless, it is values with which we are most concerned when making and evaluating decisions. 

We seek actions that bring about states of highest value, not highest reward, because these actions obtain the greatest amount of reward for us over the long run.In decision-making and planning, the derived quantity called value is the one with which we are most concerned. Unfortunately, it is much harder to determine values than it is to
determine rewards.


Although all the reinforcement learning methods we consider in this book
are structured around estimating value functions, it is not strictly necessary to do this to solve reinforcement learning problems. For example, search methods such as genetic algorithms, genetic programming, simulated annealing, and other function optimization methods have been used to solve reinforcement learning problems. These methods search directly in the space of policies without ever appealing to value functions. We call these evolutionary methods because their operation is analogous to the way biological evolution produces organisms with skilled behavior even when they do not learn during their
individual lifetimes. If the space of policies is sufficiently small, or can be structured so that good policies are common or easy to find, then evolutionary methods can be effective. In addition, evolutionary methods have advantages on problems in which the learning agent cannot accurately sense the state of its environment.Nevertheless, what we mean by reinforcement learning involves learning while interacting with the environment, which evolutionary methods do not do.It is our belief that methods able to take advantage of the details of individual
behavioral interactions can be much more efficient than evolutionary methods in many cases. Evolutionary methods ignore much of the useful structure of the reinforcement learning problem: they do not use the fact that the policy they are searching for is a function from states to actions; they do not notice which states an individual passes through during its lifetime, or which actions it selects. In some cases this information can be misleading (e.g., when states are misperceived), but more often it should enable more efficient search. Although evolution and learning share many features and can naturally work together, as they do in nature, we do not consider evolutionary methods by themselves to be especially well suited to reinforcement learning problems.


The fourth and final element of some reinforcement learning systems is a
model of the environment. This is something that mimics the behavior of the environment. For example, given a state and action, the model might predict the resultant next state and next reward. Models are used for planning, by which we mean any way of deciding on a course of action by considering possible future situations before they are actually experienced. The incorporation of models and planning into reinforcement learning systems is a relatively new development. Early reinforcement learning systems were explicitly trial-anderror learners; what they did was viewed as almost the opposite of planning. Nevertheless, it gradually became clear that reinforcement learning methods are closely related to dynamic programming methods, which do use models, and that they in turn are closely related to state{space planning methods

Exploratory moves: are the moves taken by the agent sometimes, in which when the agent is provided with optimal move and other moves somtimes it randomly chooses other moves and these moves are called exploratory moves because they cause us to experience states that wemight never see.
Exploratory moves doesn't result in any learning but each of our other moves does,causing backups as suggested by the curved arrows and detailed text

SEE IMAGE RL.png
















