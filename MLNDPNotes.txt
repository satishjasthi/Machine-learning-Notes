Source : Machine learning in Action txt book
Knowledge representation of an algo is nothing but the knowledge that the machine has gained on data when it was trained on training data.

NumPy matrix vs. array: 
In NumPy there are two different data types for dealing with rows and columns of numbers. Be careful of this because they look similar, but simple mathematical operations such as multiply on the two data types can have different meanings. The matrix data type behaves more like matrices in MATLAB.â„¢

Ex: n = np.random.rand(5,5) # creates a matrix with datatype of arrray
whereas 
n = np.mat(np.random.rand(5,5)) # creates a matrix with datatype  matrix

to get the inverse of matrix say A in pyhton we use
Inverse_A = A.I 

to get an identity matrix:
 I = np.eye(O) # O: is the order of matrix

to gets zeros:
a = (5,5)
 Z = np.(a) # creates a 5X5 zero matrix

Classifying with k-Nearest Neighbors:
---------------------------------------------------------------------
k-Nearest Neighbors
Pros: High accuracy, insensitive to outliers, no assumptions about data
Cons: Computationally expensive, requires a lot of memory
Works with: Numeric values, nominal values
----------------------------------------------------------------------

General approach to kNN:
1. Collect: Any method.
2. Prepare: Numeric values are needed for a distance calculation. A structured data format is best.
3. Analyze: Any method.
4. Train: Does not apply to the kNN algorithm.
5. Test: Calculate the error rate.
6. Use: This application needs to get some input data and output structured numeric values. Next, the application runs the kNN algorithm on this input data and determines which class the input data should belong to. The application then takes some action on the calculated class.

Euclidian distance : is the simple distance formula to calculate the distance between any two points in a plane,

d  = sqrt((X2-X1)**2 + (Y2-Y1)**2)

but the good thing is that we can use the same formula to calculate the distance b/w 2 points in n dimensional space

consider 2 points A = (x1,y1,z1,r1,k1.......,n1) ,B = (x2,y2,z2,r2,k2.......,n2)

d  = sqrt((X2-X1)**2 + (Y2-Y1)**2 + (Z2-Z1)**2 + .... + (n2-n1)**2)



































